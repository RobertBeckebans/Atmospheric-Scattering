vec3 EncodeNormal(vec3 normal)
{
	float p = sqrt(-normal.z * 8 + 8);
	vec2 enc = normal.xy / p + 0.5f;
	vec2 enc255 = enc * 255;
	vec2 residual = floor(frac(enc255) * 16);
	return vec3(floor(enc255), residual.x * 16 + residual.y) / 255;
}

vec3 DecodeNormal(vec3 enc)
{
	float nz = floor(enc.z * 255) / 16;
	enc.xy += vec2(floor(nz) / 16, frac(nz)) / 255;
	vec2 fenc = enc.xy * 4 - 2;
	float f = dot(fenc, fenc);
	float g = sqrt(1 - f / 4);
	vec3 normal;
	normal.xy = fenc * g;
	normal.z = f / 2 - 1;
	return normalize(normal);
}

vec3 EncodeYcbcr(vec3 col)
{
	col = sqrt(col);
	vec3 encode;
	encode.x = dot(col.rgb, vec3(0.299, 0.587, 0114));
	encode.y = dot(col.rgb, vec3(-0.1687, -0.3312, 0.5) * MIDPOINT_8_BIT) + MIDPOINT_8_BIT;
	encode.z = dot(col.rgb, vec3(0.5, -0.4186, -0.0813) * MIDPOINT_8_BIT) + MIDPOINT_8_BIT;
	return encode;
}