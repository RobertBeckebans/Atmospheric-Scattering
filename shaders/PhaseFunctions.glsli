//
// ref. [Preetham99][Hillaire16]
//
// equivalent with [ray-mmd] ComputeWaveLengthRaylenigh
//
vec3 ComputeCoefficientRayleigh(vec3 lambda)
{
    const float n = 1.0003f; // refractive index
    const float N = 2.545e25f; // molecules per unit
    const float p = 0.035f; // depolarization factor for standard air

    const vec3 l4 = lambda*lambda*lambda*lambda;
    return 8*PI*PI*PI*pow2(n*n - 1) / (3*N*l4) * ((6 + 3*p)/(6 - 7*p));
}

// Turbidity: (pure air to thin fog)[Preetham99] A.3
vec3 ComputeCoefficientMie(vec3 lambda, vec3 K, float turbidity, float jungeexp = 4.0)
{
    const float c = max(0.f, 0.6544f*turbidity - 0.6510f)*1e-16f; // concentration factor
    const float mie =  0.434f * c * PI * pow(2*PI, jungeexp - 2.0);
    return mie * K / pow(lambda, vec3(jungeexp - 2));
}

// The original formula shows an abrupt change in turbility change
// Therefore, we changed to linear formula
// (Due to directX 9 bug, If the exponent of pow is extremely low, it works as linear)
vec3 ComputeCoefficientLinearMie(vec3 lambda, vec3 K, float turbidity)
{
    const float c = max(0.f, 0.6544f*turbidity - 0.6510f)*1e-16f; // concentration factor
    const float mie =  0.434f * c * PI * pow2(2*PI);
    return mie * K / lambda;
}

float ComputePhaseMie(float theta, float g)
{
    return 3.0 / (8.0*PI) * ((1 - g*g)*(1 + theta*theta)) / ((2 + g*g)*pow(1 + g*g - 2 * g*theta, 1.5));
}

float ComputePhaseRayleigh(float theta)
{
    return 3.0 / (16.0*PI) * (1.0 + theta*theta);
}

