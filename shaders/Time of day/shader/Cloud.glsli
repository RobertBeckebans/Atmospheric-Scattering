#if ATM_CLOUD_ENABLE

#define NUMS_SAMPLES_CLOUD 8
#define NUMS_SAMPLES_CLOUD2 8

uniform sampler2D uNoiseMapSamp;

vec3 ComputeDensity(ScatteringParams setting, float depth)
{
	return exp(-setting.cloudLambda * depth) * (1.0f - exp(-setting.cloudLambda * depth));
}

float ComputeCloud(ScatteringParams setting, vec3 P)
{
    float atmoHeight = length(P - setting.earthCenter) - setting.earthRadius;
    float cloudHeight = saturate((atmoHeight - setting.cloudBottom) / (setting.cloudTop - setting.cloudBottom));

    vec3 P1 = P + setting.clouddir;
    vec3 P2 = P + setting.clouddir * 0.5;

    float cloud = 0.0;
    // combine clouds of various sizes for complex cloud shapes
    cloud += textureLod(uNoiseMapSamp, P1.xz * vec2(0.00009 * 2.0, 0.00009) + vec2(0.5), 0).r;
    cloud += textureLod(uNoiseMapSamp, P2.xz * vec2(0.00006 * 2.0, 0.00006) + vec2(0.5), 0).r;
    cloud += textureLod(uNoiseMapSamp, P2.xz * vec2(0.00003 * 2.0, 0.00003) + vec2(0.5), 0).r;
	cloud *= smoothstep(0.0, 0.5, cloudHeight) * smoothstep(1.0, 0.5, cloudHeight);
    // cloud intensity
	cloud *= setting.cloud;

	return cloud;
}

float ComputeCloudInsctrIntegral(ScatteringParams setting, vec3 start, vec3 end)
{
	vec3 sampleStep = (end - start) / float(NUMS_SAMPLES_CLOUD2);
	vec3 samplePos = start + sampleStep;

	float thickness = 0;

	for (int j = 0; j < NUMS_SAMPLES_CLOUD2; ++j, samplePos += sampleStep) 
	{
		float stepDepthLight = ComputeCloud(setting, samplePos);
		thickness += stepDepthLight;
	}

	return thickness * length(sampleStep);
}

void ComputeCloudsInsctrIntegral(ScatteringParams setting, vec3 start, vec3 end, vec3 V, vec3 L, inout float opticalDepth, inout vec3 insctrMie)
{
    vec3 sampleStep = (end - start) / float(NUMS_SAMPLES_CLOUD);
    vec3 samplePos = start + sampleStep;

    float sampleLength = length(sampleStep);
    vec3 opticalDepthMie = vec3(0.0);

    for (int i = 0; i < NUMS_SAMPLES_CLOUD; ++i, samplePos += sampleStep)
    {
        float stepOpticalDensity = ComputeCloud(setting, samplePos);
        stepOpticalDensity *= sampleLength;

        if (any(stepOpticalDensity))
        {
			opticalDepth += stepOpticalDensity;
			opticalDepthMie += stepOpticalDensity * ComputeDensity(setting, stepOpticalDensity);
        }
    }
	insctrMie = opticalDepthMie;
}

#endif


vec4 ComputeSkyInscattering(ScatteringParams setting, vec3 eye, vec3 V, vec3 L)
{
    vec3 insctrMie = vec3(0.0);
    vec3 insctrRayleigh = vec3(0.0);
    vec3 insctrOpticalLength = vec3(1.0);
    bool intersectionTest = ComputeSkyboxChapman(setting, eye, V, L, insctrOpticalLength, insctrMie, insctrRayleigh);

    float phaseTheta = dot(V, -L);
    float phaseMie = ComputePhaseMie(phaseTheta, setting.mieG);
    float phaseRayleigh = ComputePhaseRayleigh(phaseTheta);
    float phaseNight = 1.0 - saturate(insctrOpticalLength.x * EPSILON);

    vec3 insctrTotalMie = insctrMie * phaseMie;
    vec3 insctrTotalRayleigh = insctrRayleigh * phaseRayleigh;

    vec3 sky = (insctrTotalMie + insctrTotalRayleigh) * setting.sunRadiance;

#if ATM_LIMADARKENING_ENABLE
    float angle = saturate((1 - phaseTheta) * sqrt(abs(L.y)) * setting.sunRadius);
    float cosAngle = cos(angle * PI * 0.5);
    float edge = ((angle >= 0.9) ? smoothstep(0.9, 1.0, angle) : 0.0);

    vec3 limbDarkening = GetTransmittance(setting, -L, V);
    limbDarkening *= pow(vec3(cosAngle), vec3(0.420, 0.503, 0.652)) * mix(vec3(1.0), vec3(1.2,0.9,0.5), edge) * float(intersectionTest);

    sky += limbDarkening;
#endif

#if ATM_CLOUD_ENABLE
    if (intersectionTest)
    {
        vec2 cloudsOuterIntersections = vec2(ComputeRayPlaneIntersection(eye, V, vec3(0, -1, 0), setting.cloudTop));
        vec2 cloudsInnerIntersections = vec2(ComputeRayPlaneIntersection(eye, V, vec3(0, -1, 0), setting.cloudBottom));

        if (cloudsInnerIntersections.y > 0)
            cloudsOuterIntersections.x = cloudsInnerIntersections.y;

        vec3 cloudsStart = eye + V * max(0, cloudsOuterIntersections.x);
        vec3 cloudsEnd = eye + V * cloudsOuterIntersections.y;

        vec3 cloudsMie = vec3(0.0);
        float cloudsOpticalLength = 0.0;
        ComputeCloudsInsctrIntegral(setting, cloudsStart, cloudsEnd, V, -L, cloudsOpticalLength, cloudsMie);

        vec3 cloud = cloudsMie * phaseMie * pow2(-L.y) * setting.sunRadiance;
        vec3 scattering = mix(cloud, sky, exp(-0.000002 * cloudsOpticalLength * insctrMie));

        sky = mix(sky, scattering, V.y);
    }
#endif

    return vec4(sky, phaseNight * float(intersectionTest));
}