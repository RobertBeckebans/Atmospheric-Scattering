struct ScatteringParams
{
	float sunSize;
	float sunRadiance;

	float mieG;
	float mieHeight;
    float rayleighHeight;

	vec3 waveLambdaMie;
	vec3 waveLambdaOzone;
	vec3 waveLambdaRayleigh;

	float earthRadius;
	float earthAtmTopRadius;
	vec3 earthCenter;

    float cloud;
    float cloudBias;
    float cloudTop;
    float cloudBottom;
    vec3 clouddir;
    vec3 cloudLambda;
};

// Ref. [Schuler12]
//
// this is the approximate Chapman function,
// corrected for transitive consistency
float ChapmanApproximation(float X, float h, float coschi)
{
	float c = sqrt(X + h);
	if (coschi >= 0.0)
	{
		return	c / (c*coschi + 1.0) * exp(-h);
	}
	else
	{
		float x0 = sqrt(1.0 - coschi*coschi)*(X + h);
		float c0 = sqrt(x0);
		return 2.0*c0*exp(X - x0) - c/(1.0 - c*coschi)*exp(-h);
	}
}

float GetOpticalDepthSchueler(float h, float H, float earthRadius, float cosZenith)
{
	return H * ChapmanApproximation(earthRadius / H, h / H, cosZenith);
}

vec3 GetTransmittance(ScatteringParams setting, vec3 L, vec3 V)
{
	float ch = GetOpticalDepthSchueler(L.y, setting.rayleighHeight, setting.earthRadius, V.y);
	return exp(-(setting.waveLambdaMie + setting.waveLambdaRayleigh) * ch);
}

vec2 ComputeOpticalDepth(ScatteringParams setting, vec3 samplePoint, vec3 V, vec3 L, float neg)
{
    float rl = length(samplePoint);
    float h = rl - setting.earthRadius;
    vec3 r = samplePoint / rl;

    float cos_chi_sun = dot(r, -L);
    float cos_chi_ray = dot(r, V * neg);

    float opticalDepthSun = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cos_chi_sun);
    float opticalDepthCamera = GetOpticalDepthSchueler(h, setting.rayleighHeight, setting.earthRadius, cos_chi_ray) * neg;

    return vec2(opticalDepthSun, opticalDepthCamera);
}

#define ATM_SAMPLES_NUMS 8

void AerialPerspective(ScatteringParams setting, vec3 start, vec3 end, vec3 V, vec3 L, bool infinite, inout vec3 transmittance, out vec3 insctrMie, out vec3 insctrRayleigh)
{
    float inf_neg = infinite ? 1.0 : -1.0;

    vec3 sampleStep = (end - start) / ATM_SAMPLES_NUMS;
    vec3 samplePoint = end - sampleStep;
    vec3 sampleLambda = setting.waveLambdaMie + setting.waveLambdaRayleigh + setting.waveLambdaOzone;

    float sampleLength = length(sampleStep);

    vec3 scattering = vec3(0.0, 0.0, 0.0);
    vec2 lastOpticalDepth = ComputeOpticalDepth(setting, end, V, L, inf_neg);   

    for (int i = 1; i < ATM_SAMPLES_NUMS; i++, samplePoint -= sampleStep)
	{
		vec2 opticalDepth = ComputeOpticalDepth(setting, samplePoint, V, L, inf_neg);

		vec3 segment_s = exp(-sampleLambda * (opticalDepth.x + lastOpticalDepth.x));
		vec3 segment_t = exp(-sampleLambda * (opticalDepth.y - lastOpticalDepth.y));
		
		transmittance *= segment_t;
		
		scattering = scattering * segment_t;
		scattering += exp(-(length(samplePoint) - setting.earthRadius) / setting.rayleighHeight) * segment_s;

		lastOpticalDepth = opticalDepth;
	}

	insctrMie = scattering * setting.waveLambdaMie * sampleLength;
	insctrRayleigh = scattering * setting.waveLambdaRayleigh * sampleLength;
}

bool ComputeSkyboxChapman(ScatteringParams setting, vec3 eye, vec3 V, vec3 L, inout vec3 transmittance, out vec3 insctrMie, out vec3 insctrRayleigh)
{
    bool neg = true;

    vec2 outerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthAtmTopRadius);
    clip(outerIntersections.y);

    vec2 innerIntersections = ComputeRaySphereIntersection(eye, V, setting.earthCenter, setting.earthRadius);
    if (innerIntersections.x > 0.0) // if forward to the ground (not if under ground)
    {
        neg = false;
        outerIntersections.y = innerIntersections.x;
    }

    // earth center have nagative value (like relative cordinate)
    eye -= setting.earthCenter;

    vec3 start = eye + V * max(0.0, outerIntersections.x);
    vec3 end = eye + V * outerIntersections.y;

	AerialPerspective(setting, start, end, V, L, neg, transmittance, insctrMie, insctrRayleigh);

    // ground case
	bool intersectionTest = innerIntersections.x < 0.0 && innerIntersections.y < 0.0;
	return intersectionTest;
}

// [Preethama99] A.1 etc.
float ComputeOpticalMass(float cosAngle)
{
    float cosAngleRadians = degrees(acos(cosAngle));
    return 1.0 / (cosAngle + 0.15 * pow(abs(93.885 - cosAngleRadians), -1.253));
}

vec3 ComputeScatteringFunctions(vec3 inscatteringMie, vec3 inscatteringRayleigh, vec3 V, vec3 L, float g)
{
	float sunTheta = dot(V, L);

	vec3 betaMie1 = inscatteringMie * ComputePhaseMie(sunTheta, g);
	vec3 betaRayleigh = inscatteringRayleigh * ComputePhaseRayleigh(sunTheta);

	vec3 betaTotal = (betaMie1 + betaRayleigh);
	return betaTotal / (inscatteringMie + inscatteringRayleigh);
}

float ComputeSunIntensity(float EE, float zenithAngleCos)
{
    float steepness = 1.5;
	float cutoffAngle = PI / 1.95;
	return EE * saturate(1.0f - exp(-((cutoffAngle - acos(zenithAngleCos)) / steepness)));
}

vec4 ComputeSkyScattering(ScatteringParams setting, vec3 V, vec3 L)
{
    vec3 up = vec3(0, 1, 0);
    vec3 sunDirection = normalize(-L);

    float zenithAngle = saturate(dot(V, up));
    float zenithAngleCos = dot(sunDirection, up);
	float zenithAngleMass = ComputeOpticalMass(zenithAngle);

    vec3 inscatteringMie = setting.waveLambdaMie;
    vec3 inscatteringRayleigh = setting.waveLambdaRayleigh;

    vec3 inscattering = ComputeScatteringFunctions(inscatteringMie, inscatteringRayleigh, V, sunDirection, setting.mieG);
	inscattering *= ComputeSunIntensity(10, zenithAngleCos);

	vec3 opticalMie = inscatteringMie * setting.mieHeight * zenithAngleMass;
	vec3 opticalRayleigh = inscatteringRayleigh * setting.rayleighHeight * zenithAngleMass;
	vec3 extinction = exp(-(opticalMie + opticalRayleigh));

	vec3 Lin = inscattering * (1.0 - extinction);

	return vec4(Lin, 1.0);
}